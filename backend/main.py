from telebot import TeleBot
from flask import Flask, request, jsonify
from flask_cors import CORS
from dotenv import load_dotenv
from database import DataBase
import os
import threading

load_dotenv()

class Bot:
    def __init__(self):
        self.bot = TeleBot(token=os.getenv("TOKEN"))
        self.db = DataBase()
        self.app = Flask(__name__)
        CORS(self.app, origins="*")  # –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è dev

        self._register_handlers()
        self._register_apis()

        threading.Thread(
            target=lambda: self.app.run(port=5000, debug=True, use_reloader=False)
        ).start()

    def _register_handlers(self):
        self.bot.register_message_handler(self.show_menu, commands=['start'])
        self.bot.register_message_handler(self.instructions, commands=['help'])

    def _register_apis(self):
        self.app.route("/get_user", methods=['GET'])(self.get_user)
        self.app.route("/create_user", methods=['POST'])(self.create_user)
        self.app.route("/get_purchases", methods=['GET'])(self.get_purchases)
        self.app.route("/ping", methods=['GET'])(self.ping)

    def get_purchases(self):
        user_id = request.args.get('id')
        data = self.db.get_data(table="purchases", column="id", element=user_id)
        return jsonify(data)
    
    def ping(self):
        return jsonify({
            "status": "ok",
            "message": "Flask API —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ",
        })

    def get_user(self):
        user_id = request.args.get('id')
        user = self.db.get_data(column="id", element=user_id)
        return jsonify(user)

    def create_user(self):
        data = request.get_json()
        self.db.insert_data(table="users", data=data)
        return jsonify({"status": "success", "data": data})

    def show_menu(self, message):
        response = self.db.get_data(column="id", element=message.from_user.id)
        if not response:
            self.db.insert_data(table="users", data={
                "id": message.from_user.id,
                "username": message.from_user.username
            })

        self.bot.send_message(
            message.chat.id,
            text=(
                "üëã –ü—Ä–∏–≤–µ—Ç!\n"
                "–¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –º–∞–≥–∞–∑–∏–Ω–∞ Ghost404 üéÅ\n\n"
                "–í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å:\n"
                "‚Ä¢ /start ‚Äî –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
                "‚Ä¢ /help ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É\n\n"
                "–¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–∏—Ö –±–∞–ª–ª–∞—Ö –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö.\n\n"
                "–í–º–µ—Å—Ç–µ –∫–æ–ø–∏—Ç—å –±–∞–ª–ª—ã ‚Äî –≤–µ—Å–µ–ª–æ –∏ –≤—ã–≥–æ–¥–Ω–æ! üöÄ"
            ),
            parse_mode="Markdown"
        )

    def instructions(self, message):
        self.bot.send_message(
            message.chat.id,
            text=(
                "üí° –ö—Ä–∞—Ç–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã:\n\n"
                "1Ô∏è‚É£ –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–∏—Ö –±–∞–ª–ª–∞—Ö –∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.\n"
                "2Ô∏è‚É£ –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É ‚Äî @ghostedmng"
            ),
            parse_mode="Markdown"
        )

    def start_bot(self):
        self.bot.infinity_polling()


if __name__ == "__main__":
    bot = Bot()
    threading.Thread(target=bot.start_bot).start()
